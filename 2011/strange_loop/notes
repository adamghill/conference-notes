ERIC MEIJER ()MICROSOFT) - CATEGORY THEORY
  BIG DATA - not only about size, it is about data diverstiy
    interaction patterns between producers/consumers
    Diff between FK and key/value store?
    Design space that spans 3-d
  NoSQL
    co-sql
    objects vs tables
      memory is key/value store -> objects
    Sql is imperative language (example -> inserting/updating)
    arbitrarily deep hierarchy
  SQL
    not compositional
    impedance mismatch -> ORM
    indexes implicitedly make object model
    
  "Nothing new in CS, everything has been discovered 5 times"

  Trade-offs between Sql/NoSql

  Arrows reversed for nosql/sql

  CATEGORY THEORY
    interface for functions
    compositional
    "first OO programmers"
    duality -> reverse the arrows, duo, the categories hold for both
      de morgens law
      can use scientific constraints to pick technology (instead of newness/hipness) -> more like scientists to reason about solutions

  SQL vs NOSQL
    Sql - children point to parent, cosql - patent point to childern
    sql - entities have identity, cosql - environment (memory) determines identity
    sql - environment coordingates changes, cosql - entities responsible to react to changes
    sql - closed, co - open


FUNCTIONAL THINKING - Neal Ford
  not nouns, verbs -> just do it
  took decades to use objects, don't see power, only see differences
  started as academic offshot
  scala, clojure, f#, plus erlang/haskell
  Feathers - "OO makes coed understandable y encapsulating moving parts" -> visibility rules, facilities to manage changing state
  "FP minimize moving oarts", fewer parts , easrier to reason
  
  The Productive Programmer -- TDD
  6: 1 + 2 + 3 + 6 = (2x6) = 12
  > 2*#: abundant
  < 2*#: difficient

  minimize shared state
  no internal state
  no scoping, all methods are public
  pure functions -> only rely on paramaeters and return values
  public and static
  no information hiding
  "more a way of thinking, than a particular toolset"

  first-class/higher order functions
  pure functions
  prefer recursion over iteration
  strict valuation
  
  think about results, not results
  post-imperative world

  fn becomoing popular b/c optimize person time, not optimized for CPU
  lnguages handle garbage collction, concurrency, state, test, etc
  thinking functionally
    immutabliity over state transitions
    "functional thinking" articles
  "results over steps"
  "composition over structure"
  declarative over imperative
  paradigm over tool

  SUMMARY
    new ways of thinking design
    new tools for extions, reuse
    immutable by default -> beneficial beginning steps
    following the general trend in langugage design
    enables new way sto view problems

FOG OR HOW I LEARNED TO LOVE THE CLOUD - Wesley Beary (Geemus)
  on demand, flexible, repeatable, resilient
  why worry? option overload, expertise, tools have vastly different API/qualitiy, standards
  "ORM for cloud services"
  why? portable, owerful, established

A TALE OF THREE TRESS - SCOTT CHACON
  esoteric/abstract talk about git
  git is... system for storing trees (files, sub-directories)
  1st tree
    head - pointer to last commit (a tree)
    parent of next commit
  2nd tree
    the index (staging area)
    single file manifest
    git ls-files -s
    propsed nex commit
  3rd tree
    working directory
    still a snapshot
    sandbox

  WORKING WITH TREES
    git status - difference between three tress

  GIT RESET
    tool to manipulate the three tress
    git reset [commit] [path] -> opposite of git add
    takes content from db (head) into index
    git reset [commit] -> works on tress as a whole
      --soft -> move HEAD to target
        git reset --soft HEAD~ -> revert last commit
      [--mixed] -> then copy to index (this is the default)
        unstages everything
        leaves working directory
      --hard -> then copy to work dir (make all tress the same)

      git add -p -> partial commits of logical changes

    git commit --ammend
      git soft, git ci

    git reset --soft HEAD~2, git commit -> moves HEAD back, keeps index

  GIT CHECKOUT
    moves branch that HEAD points to
    git checkout [commit] [path] 

  FUN WITH YOUR TREES
    git add --patch [file]
    git reset --patch (commit) [file]
    git checkout --patch (commit) [file]
    git rev-parse -> sha for commit
    git hash-object -> basically what git add does
    git ls-tree/cat-file -> tree objects
    git ls-files -s -> staging area
    git read-tree -> subset of reset
    git update-index
    git write-tree
    git commit-tree
    git symbolic-ref

COFFEESCRIPT - JEREMY ASHKENAS
  stay true to JS

  STARTED
    started as potion-y
    Ruby compiler

  0.5
    wrote CS in CS
    "People shouldn't be compilers, computers are better at it"

  Take JS design pattern, and see the minimalist, easiest way to do them

  CS = Syntax + semantics + goodies

  Binding this in current js is un-usable b/c of the way prototypes are set up

  BUILD YOUR OWN JAVASCRIPT

GETTING TRUTH OUT OF THE DOM - YEHUDA KATZ
  Advanced javascript applications
  source of truth for data

  1st step -> evented jquery
    fire higher-level event which updates DOM
    reduces coupling
    better set of events
    click on this DOM, update this DOM -> blerg

  WIDGETS
    wrap DOM in object
  
  ENCAPSULATE state of single view
    manage "views"
    seperate object that represents reality

  MODELS and OBSERVERS
    multiple observers on a model

    INTERMEDIATE STATE
      batched operations -> event on particular checkbox for bulk operations

    1:1 MODEL/VIEW COUPLING
      a data object "has an element"

  A PROBLEM
    application state
    reverse engineer information from aggregates

  EDGE CASES
    Mark all checkbox
      add new todo
      check todo

  REALITY, VIEW, MEDIATING SPACE -> MVC
    too many acronyms (MVP, MVVM, etc) pseudo-rant :)

    "Don't actually need a C because we are too hipster"

  SPROUTCORE
    MVC auto-sync layer
    you declare linkage, SC keeps layers in sync
    handles batches
    layer of abstraction
    changes buffered between layers

    TEMPLATING
      had problems with ajax requests to update DOM, but new version deals better
      describes living state of DOM, not just first view with more html for updates

    MAGIC!

WE DON"T KNOW HOW TO COMPUTE - SUSSMAN
  Human genome is 1 GB - same as MS Windows
    flexible
    neighboring cells talk to each other
  intuitions about programming come from a time of scarcity (CPU, memory) -- no need to optimize anymore
  minimze latency, though
  real cost is cost of programmers
  pundits worry 
    about correctness, needs reasonable
    security -> humans deal with mutating parasites for 70+ years

  spend all time modifing existing code
  good for problems the designer didn't intend
  programming into holes
  consequences of changes aren't so expensive

  dynamically add methods at runtime
    flexibility
    pay proof of correctness for flexibility
    proofs force specs to be as tight as positive
      brittle

  "I hate all computer lanugages nowadays, even the ones I invent"
  "A real engineer doesn't want a religion to solve a problem, like, OO, FP, imperative, procedural." 
  Real engineers want to use the correct solution for the particular problem
  Silly to worry about type system

  Filling in details from local information

  Problem is Evolvibility, not correctness

HERESIES AND DOGMAS - DEAN WAMPLER (LOOK UP HTML5 and DISTRIBUTED SYSTEMS)
  Software is faih-based

  GOTO
  DESIGN BEFORE CODE
    Do the change at the right possible time
  DESIGN PATTERNS
    Solution ot a problem in a context
    Some languages fix patterns - Lisp
    Lisp has their own patterns, they just have different terms
    Specific patterns come and go
  CORBA vs REST
    Corba - binary, interface instability
      objects are not very modular
        interface, composable, reusable
      fundamental flaws
    Exmaple of modularity
      digital circuits
      http
    OO
      "Unconstrained freedom to create abstraction undermines reuse" -> constraints help with modularity
  OBJECT IDDLEWARE AND ORMs
    largely contextual whether it is a good idea or not
    Rich domain model means fewer fatter services
    Node.JS/Mongo -> uniform data model

  Whether it's a dogma or heresies is a matter of branding

EVENT-DRIVEN PROGRAMMING IN CLOJURE
  sync is easy, async is more complex (looks like node)
  often spend more time waiting on data than we fo computing our response
  syncronous concurrency -> fork/join model
    threads aren't free
    thread pool
    "someone is trying to be as clever as you"
    nested concurrency
  async exposes an inherent complexity
  less leaky abstractions
  sync/async not mutually exclusive
  "complexity is local"
  code expresses dependencies
  looks like the async module
  difficult to debug, complicated flows are still complicated

STAGE-CRAFT IN UX (ALSO LOOK AT TALE OF TWO RUNTIMES - MOJITO)
  Experience is actually psychology
  user-interface, as known as UI "user illusion"

  PREPARE
    consider the stage and the audience
    Effects are different based on scale
      phone/tablet/PC
  PRACTICE * 3
    practice until you have it perfect, then practice 100 more times
    magic: makes the trick look natural
    testing/alpha/beta
  OVERCOME OBJECTS BEFORE THEY ARISE
    magic: hyponotize assistant before sawing in half
    logins (facebook/twitter/yahoo/open id)
      remove barriers
  PERFORM
    patter and showmanship - presentation as important as content
    soda jerkers - best performance
    users care about experience, not mechanics
  SLIGHT OF HAND (TIMING MATTERS)
    brains edit out certain details, to make it understand reality
    1/tenth of a second
      direct manipulation - instant
    full second
      uninterrupted flow - notice lag, but still involved in process
    10 seconds
      keeps attention - user's mind start wander
  DIRECTION
    divert attention
    call to action -> color, whitespace
    brains evolved to track motion
      notification
    recognize faces
      status lines on twitter/facebook/linkedin
  MISDIRECTION
    all magic is misdirection

    simulation - trash can for deleting
      metaphor
      skeumorph
        floppy disk
        rivet on jeans
        ibook
      dissimulation
        web applications - make web apps look like desktop apps
        key in on little details
      anticipation
        progress bar in web apps
  TWO WORLDS
    world of the end user (performance)
    world of the developer (performer)

PRODUCT ENGINEERING
  appsterdam
  amsterdam sounds awesome

POST-PC COMPUTING IS NOT A VISION - Allen Wirfs-Brock (Mozilla)
  No idea of where we are going
  Post-mainframe era?
  computing era based on impact on society
    corporate computing, personal computing
  this new era
    mobile, cloud, tablet, games/media, 
    
    SOME ORGANIZATIONS
      how do you monaitze user? might not be the best

  AMBIENT ERA
    centrally augment everyday life of individuals
    ubiquitous availability
    pervasive
    nano on wrist watch, earphones in glasses -> enhance world

  TRANSITIONAL TECHNOLOGIES
    rooted in present
    has characteristics of era to come

    MAINFRAME
      timesharing
      shrinking the size of the computers (minicomputer)
    AMBIENT
      cell phones
        always with you, connected
      WWW/browers
        availability more important than performance
        universal presentation platform
      when something becomes ubiquitous, it disappears

  DOMINANT APPLICATION PLATFORM
    corporate -> IBM Mainframe
    personal -> Microsoft
    ambient -> JavaScript?
      web apps vs native apps
      could there be an era based on open standards?

  CANONCIAL PROGRAMMING LANGUAGE
    corporate - COBOL/Fortran
    personal - C
    ambient - javascript

  JAVASCRIPT
    ecmascript
      interoperability is highest priority
    harmony
      be better for:
        complex applications
        libraries (including the DOM) shared by apps
        code generators
        SmallTalk to JavaScript -> http://amber-lang.net/index.html
      modules, namespaces
      sand-boxing module loaders
      proxy obejcts
      control abstractions via iterators and generators
      array comprehensions, string interpolation
      super references
      encapsulated state via private names
      better support for class-style inheritance
  
  USERS: Customers or merchandise?
    are we building devices and services that empower people?
    build systems we would want to use
    keep user in control
  identity, privacy

  Need revolutionaries and dreamers

INFOQ.COM -> for StrangeLoop videos

SIMPLE MADE EASY - RICH HICKEY
  "Simplicity is prerequsite for relibility" - Djikstra

  WORD ORIGINS
    simple -> one twist/braid/fold
    complex -> many folds
    easy -> lie near
    hard ->

  SIMPLE
    lack of interleaving, not cardinality
    objective

  EASY (relative)
    near, at hand
      in our toolset, IDE, etc
    near to our understanding, that we alreay know, familar
      self-involved to get things instantly
      never learn anything know
    near our capabilities
      tramples on our egos

  CONSTRUCT vs ARTIFACT
    program with constructs
      programmer convenience
      programmer replaceability
    in the business of artifacts -> users don't care of sourcecode
    long term results of use
      quality, correctness
      maintanance, change
    must assess constructs by their artifacts

  LIMITS
    only hope to make realible those things we can understand
    only consider a few things at a time
    intertwined things must be considered together
    complexity undermines understanding

  CHANGE
    changes to software require analysis and decisions
    what will be impacted
    where do changes need to be made
    need to reason about program
    informal reasoning

  DEBUGGING
    every bug in the field
      passed the type checker
      passed the tests
    guardrail world
      don't help you get to where to go
      need to reason about program

  DEVELOPMENT SPEED
    emphasizing ease gives early speed
    "fire starter pistol every 100 yards"
    ignore complexity will slow you down over the long haul
    throwaway/trivial projects, nothing much matters

  EASY YET COMPLEX
    complicating constructs are
      succinctly described, familiar, available, easy to use
    what matters is the complexity they yield
      complexity is incidental
      incidental -> "your fault" -> programming with a loom

  BENEFITS OF SIMPLICITY
    easy of understanding
    ease of change
    easier debugging
    flexibility
      policy
      location

  MAKING THINGS EASY
    installing
    become familiar by learning, trying
    mental capability
      make things near by simplifying them
      everyone is statistically at the same point

  PARENS ARE HARD!
    not at hand for most
    not familiar
    CL/Scheme
      overloaded parens used for calls and grouping and data structures
      adding a new data structure makes things simplier

  "LISP programmers know the value of everything and the cost of nothing" - Alan Perlis
    performance cost
    never any trade-offs, only for benfits

  COMPLEXITY
    state, objects
    methods
    variables
    inheritance, switch, matching
    syntax
    imperative loops, fold
    actors
    ORM
    conditions
    inconsistency

  SIMPLE
    vlaues
    functions, namespaces
    managed refs
    polymorphism
    data
    set functions
    queues
    declarative data manipulation
    rules
    consistency

  COMPLECT
    -> to interleave, entwine, braid
    complecting things is the source of complexity
    best to avoid in the first place

  COMPOSE
    -> to place together
    compossing simple components is the key to robust software

  MODULARITY AND SIMPLICITY
    all done! so simple
    partitioning and stratification don't imply simolicity
      but they are enabled by it
      code organization

  STATE IS NEVER SIMPLE
    complects value and time
    it _is_easy, familiar
    interleaves everything that touches it, directly or indirectly
      not mitigated by modules, encapsulation
    this has nothing to so with async
    same input -> same output

  NOT ALL RES/VARS ARE EQUAL
    none makes state simple

  POLYMORPHISM ala carte
    protocols, type classes

  ENVIRONMENTAL COMPLEXITY
    resources
    inherant complexity in implemtation space
      all components contend for them
    segmentation
      waste
    individual policies don't compose

  MAKING THINGS SIMPLE
    abstract -> drawn away, from the physical nature
    vs Abstraction as complexity hiding
    "I don't know, I don't want to know"

    WHAT
      operations
      form abstrctions from related sets of functions
        small sets (interfaces, prototypes, specifications)
      polymorphism
      inputs, outputs, semantics

    WHO
      entities implementing abstractions
      DI from subcomponents
        small interfaces
        e.g. policy
        beware of component details

    HOW
      implementing
      abstractions and entities via polymorphism
      declaritive

    WHEN/WHERE
      strenuously avoid complecting these with anything
      can seep in via directly connected objects
        queues

    WHY
      policiy and rules of application
      often strewn everywhere
        complected with control flow

    INFORMATION _IS_ SIMPLE
      don't ruin it
      objects shouldn't be applied to information
        thwarts generic data composition
        ties logic to representation du jour
      represent data as data

  SIMPLIFYING
    disentangle
    identify threads

  SIMPLICITY IS A CHOICE
    culture of complexity
    requires vigilence, sensibilities and care
    simplicity != ease/familiarity
      develop sensibilties around entanglement
    reliability tools don't care; just safety nets

  SIMPLICITY MADE EASY
    choose simple constructs
      it is the artifacts, not eh authoring
    create abstractions with simplicity as basis
    simplify problem space
    simplicity often means making more things, not fewer
    reap the benefits

  "Simplicity is the ultimate sophistication" - da Vini
